name: Promote Branch

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create-promotion-pr:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Delete existing promotion branches
        run: |
          git fetch origin
          for branch in $(git branch -r | grep 'origin/promote-branch-' | sed 's/origin\///'); do
            git push origin --delete "$branch"
          done

      - name: Create promotion branch
        run: |
          MERGED_BRANCH_NAME=$(echo "${{ github.event.pull_request.head.ref }}" | sed 's/[^a-zA-Z0-9]/-/g')
          PROMOTE_BRANCH="promote-${MERGED_BRANCH_NAME}"
          echo "MERGED_BRANCH_NAME=$MERGED_BRANCH_NAME" >> $GITHUB_ENV
          echo "PROMOTE_BRANCH=$PROMOTE_BRANCH" >> $GITHUB_ENV

          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git checkout -b ${PROMOTE_BRANCH}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Synchronize dev to prod directories
        run: |
          rsync -av --delete terraform/dev/ terraform/prod/
          rsync -av --delete argocd/dev/ argocd/prod/

      - name: Stage and commit all changes
        run: |
          git add -A
          git commit -m "Promote ${MERGED_BRANCH_NAME} to prod"
          git push origin ${PROMOTE_BRANCH}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR
        run: |
          gh pr create --title "Promote ${MERGED_BRANCH_NAME} to prod" --body "This PR promotes changes from ${MERGED_BRANCH_NAME} to prod" --base main --head ${PROMOTE_BRANCH}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}