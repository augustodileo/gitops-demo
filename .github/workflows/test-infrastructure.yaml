name: Test Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (e.g., dev, prod)'
        required: true
        type: choice
        options:
          - dev
          - prod

  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        id: set-environment
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            if git diff --name-only origin/main...HEAD | grep -q 'terraform/cluster-creation/prod\|terraform/application/prod'; then
              echo "environment=prod" >> $GITHUB_OUTPUT
            else
              echo "::set-output name=environment::dev"
              echo "environment=dev" >> $GITHUB_OUTPUT
            fi
          fi
  
  deployment:
    needs: set-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.set-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Create Cluster
        id: create-cluster
        uses: ./.github/actions/create-cluster
        with:
          awsAccessKeyId: ${{ vars.AWS_ACCESS_KEY_ID }}
          awsBucket: ${{ vars.AWS_BUCKET }}
          awsDynamoDBTable: ${{ vars.AWS_DYNAMODB_TABLE }}
          awsRegion: ${{ vars.AWS_REGION }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_KEY }}
          branch: ${{ github.ref_name }}
          clusterName: ${{ vars.CLUSTER_NAME }}
          environment: ${{ vars.ENVIRONMENT_NAME }}

      - name: Create Application
        id: create-application
        uses: ./.github/actions/create-application
        with:
          awsAccessKeyId: ${{ vars.AWS_ACCESS_KEY_ID }}
          awsBucket: ${{ vars.AWS_BUCKET }}
          awsDynamoDBTable: ${{ vars.AWS_DYNAMODB_TABLE }}
          awsRegion: ${{ vars.AWS_REGION }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_KEY }}
          branch: ${{ github.ref_name }}
          environment: ${{ vars.ENVIRONMENT_NAME }}
          kubeconfigContent: ${{ steps.create-cluster.outputs.kubeconfigContent }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.4'

      - name: Run tests
        id: run-tests
        run: kubectl get pods -n default
        env:
          KUBECONFIG: ${{ steps.create-cluster.outputs.kubeconfigContent }}

      - name: Destroy Application
        if: always()
        uses: ./.github/actions/destroy-application
        with:
          awsAccessKeyId: ${{ vars.AWS_ACCESS_KEY_ID }}
          awsBucket: ${{ vars.AWS_BUCKET }}
          awsDynamoDBTable: ${{ vars.AWS_DYNAMODB_TABLE }}
          awsRegion: ${{ vars.AWS_REGION }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_KEY }}
          branch: ${{ github.ref_name }}
          environment: ${{ vars.ENVIRONMENT_NAME }}
          kubeconfigContent: ${{ steps.create-cluster.outputs.kubeconfigContent }}

      - name: Destroy Cluster
        if: always()
        uses: ./.github/actions/destroy-cluster
        with:
          awsAccessKeyId: ${{ vars.AWS_ACCESS_KEY_ID }}
          awsBucket: ${{ vars.AWS_BUCKET }}
          awsDynamoDBTable: ${{ vars.AWS_DYNAMODB_TABLE }}
          awsRegion: ${{ vars.AWS_REGION }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_KEY }}
          branch: ${{ github.ref_name }}
          clusterName: ${{ vars.CLUSTER_NAME }}
          environment: ${{ vars.ENVIRONMENT_NAME }}