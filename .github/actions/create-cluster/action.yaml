name: 'Terraform Cluster Creation'
description: 'Initialize and apply Terraform configuration for cluster creation'

inputs:
  awsAccessKeyId:
    description: 'AWS Access Key ID'
    required: true
  awsBucket:
    description: 'AWS Bucket name'
    required: true
  awsDynamoDBTable:
    description: 'AWS DymamoDB Table name'
    required: true
  awsRegion:
    description: 'AWS S3 Region'
    required: true
  awsSecretAccessKey:
    description: 'AWS Secret Access Key'
    required: true
  branch:
    description: 'Branch for the infrastructure'
    required: true
  clusterName:
    description: 'Cluster name'
    required: true
  environment:
    description: 'Environment for the infrastructure'
    required: true

outputs:
  kubeconfigContent:
    description: 'Kubeconfig content'
    value: ${{ steps.extract_kubeconfig.outputs.kubeconfigContent }}

runs:
  using: 'composite'
  steps:
    - name: Terraform Init
      run: |
        cd terraform/cluster/${{ inputs.environment }}
        terraform init \
          -backend-config="bucket=${{ inputs.awsBucket }}" \
          -backend-config="dynamodb_table=${{ inputs.awsDynamoDBTable }}" \
          -backend-config="key=${{ env.BACKEND_KEY }}" \
          -backend-config="region=${{ inputs.awsRegion }}"
      env:
        BACKEND_KEY: "gitops-demo/${{ inputs.environment }}/${{ inputs.branch }}/cluster.tfstate"
      workking-directory: terraform/cluster/${{ inputs.environment }}
      shell: bash

    - name: Terraform Apply
      id: apply
      run: |
        cd terraform/cluster/${{ inputs.environment }}
        terraform apply \
          -auto-approve \
          -var="cluster_name=${{ inputs.clusterName }}"
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.awsAccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.awsSecretAccessKey }}
      shell: bash

    - name: Extract Kubeconfig
      id: extract_kubeconfig
      run: |
        echo "::set-output name=kubeconfigContent::$(terraform output -raw kubeconfig_content)"
      shell: bash