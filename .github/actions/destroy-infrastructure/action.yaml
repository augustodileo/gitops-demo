name: 'Terraform Infrastructure destroy'
description: 'Initialize and destroy Terraform configuration'

inputs:
  applicationsList:
    description: 'List of applications to install'
    required: true
  awsAccessKeyId:
    description: 'AWS Access Key ID'
    required: true
  awsBucket:
    description: 'AWS Bucket name'
    required: true
  awsDynamoDBTable:
    description: 'AWS DynamoDB Table name'
    required: true
  awsRegion:
    description: 'AWS S3 Region'
    required: true
  awsSecretAccessKey:
    description: 'AWS Secret Access Key'
    required: true
  branch:
    description: 'Branch for the infrastructure'
    required: true
  clusterName:
    description: 'Cluster name'
    required: true
  environment:
    description: 'Environment for the infrastructure'
    required: true
  kubeconfigPath:
    description: 'Kubeconfig content'
    required: true
    default: ""
  repoUrl:
    description: 'Repository URL for the Application manifests'
    required: true
  workingDirectory:
    description: 'Working directory inside the repo'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ inputs.awsBucket }}" \
          -backend-config="key=${{ env.BACKEND_KEY }}" \
          -backend-config="region=${{ inputs.awsRegion }}" \
          -backend-config="dynamodb_table=${{ inputs.awsDynamoDBTable }}"
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.awsAccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.awsSecretAccessKey }}
        BACKEND_KEY: "gitops-demo/${{ inputs.environment }}/${{ inputs.branch }}/application-key.tfstate"
      working-directory: ${{ inputs.workingDirectory }}
      shell: bash

    - name: Terraform Destroy with Retry
      run: |
        set +e  # Allow the script to continue on errors
        MAX_RETRIES=5
        DELAY=30
        retry_count=0

        # Loop until the maximum number of retries is reached
        until [ $retry_count -ge $MAX_RETRIES ]
        do
          # Attempt to perform terraform destroy
          terraform destroy -auto-approve \
            -var 'applications_list=${{ inputs.applicationsList }}' \
            -var "cluster_name=${{ inputs.clusterName }}" \
            -var "kubeconfig_path=${{ inputs.kubeconfigPath }}" \
            -var "path=argocd" \
            -var "repo_url=${{ inputs.repoUrl }}" \
            -var "target_revision=${{ inputs.branch }}"
          exit_code=$?

          # Check if the destroy was successful
          if [ $exit_code -eq 0 ]; then
            echo "Terraform destroy completed successfully."
            exit 0
          else
            echo "Terraform destroy failed. Retrying in $DELAY seconds..."
            retry_count=$((retry_count+1))
            sleep $DELAY
          fi
        done

        echo "Terraform destroy failed after $MAX_RETRIES attempts."
        exit 1
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.awsAccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.awsSecretAccessKey }}
      working-directory: ${{ inputs.workingDirectory }}
      shell: bash